<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459864727960">{:repl-history {:ide [], :local [&quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :color (create-color :red)}))&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :foreground (create-color :red)}))&quot; &quot;(styled-text 100 100 a)&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :foreground (create-color :red) :swap-colors-on true}))&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :foreground (create-color :red) :swap-colors true}))&quot; &quot;(def image (load-image \&quot;res/bg-1.JPG\&quot;))&quot; &quot;img&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))&quot; &quot;(set-background (create-color :black))&quot; &quot;(image 400 0 img)&quot; &quot;(macroexpand '(create-general-path (lineTo 1 2)))&quot; &quot;(def a (GeneralPath.))&quot; &quot;(doto a\n  (.moveTo 100 200)\n  (.lineTo 200 200)\n  (.lineTo 150 100)\n  (.lineTo 100 200))&quot; &quot;(doto a\n  (.lineTo 200 200)\n  (.lineTo 150 100)\n  (.lineTo 100 200))&quot; &quot;(create-image 800 600 {:antialiasing :on}\n              (draw {:color (create-color)}))&quot; &quot;(create-image 800 600 {:antialiasing :on}\n              (draw {:color (create-color)\n                     :dash [10.0 10.0]}\n                    (rectangle 100 100 100 100)\n                    ()))&quot; &quot;(macroexpand '(draw {:color (create-color :blue :dash [10.0 20.0])}\n                    (rectangle 200 200 100 100)))&quot; &quot;(draw {:color (create-color :blue :dash [10.0 20.0])}\n                    (rectangle 200 200 100 100))&quot; &quot;(draw {:color (create-color :blue) :dash [10.0 20.0]}\n                    (rectangle 200 200 100 100))&quot; &quot;(draw {:color (create-color :blue) :dash [10.0 20.0]}\n                    (rectangle 200 200 100 100 fill))&quot; &quot;(draw {:color (create-color :blue) :dash [10.0 20.0]}\n                    (rectangle 200 200 100 100 true))&quot; &quot;(draw {:color (create-color :blue) :dash [10.0 20.0]}\n                    (rectangle 200 200 100 100 false)\n      default-shape-values)&quot; &quot;(macroexpand '(draw {:color (create-color :blue) :dash [10.0 20.0]}\n                    (rectangle 200 200 100 100)))&quot; &quot;(draw {:color (create-color :blue) :dash [10.0 20.0]}\n      (rectangle 200 200 100 100 false)\n      (println default-shape-values))&quot; &quot;(poly)&quot; &quot;(polygon [150,250,325,375,450,275,100] [150,100,125,225,250,375,300] 7 true)&quot; &quot;(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] 7 true)&quot; &quot;(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true \&quot;sdsd\&quot;)&quot; &quot;(count [1 2 3])&quot; &quot;(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true {})&quot; &quot;(macroexpand '(draw-reset-settings {:test \&quot;test\&quot;} (set-color (create-color :blue))))&quot; &quot;(macroexpand '(draw-reset-settings {} (set-color (create-color :blue))))&quot; &quot;(draw-fill-reset {:blub \&quot;blubber\&quot;}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count x))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300]))))\n         \n         &quot; &quot;(macroexpand '(draw-fill-reset {:blub \&quot;blubber\&quot;}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count x))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300])))))\n         \n         &quot; &quot;(macroexpand '(draw-fill-reset {}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count x))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300])))))\n         \n         &quot; &quot;(draw-fill-reset {}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count x))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300]))))&quot; &quot;(draw-fill-reset {}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count [150 100 125 225 250 375 300]))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300]))))&quot; &quot;(macroexpand '(draw-fill-reset {}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count x))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300])))))&quot; &quot;(macroexpand '(draw-fill-reset {:bla \&quot;blubber\&quot;}\n                          (if (not-empty (:bla \&quot;blubber\&quot;))\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count [150 100 125 225 250 375 300]))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300])))))&quot; &quot;(macroexpand '(draw-fill-reset {:bla \&quot;blubber\&quot;}\n                          (if true)\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count [150 100 125 225 250 375 300]))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300]))))&quot; &quot;(macroexpand '(draw-fill-reset {:bla \&quot;blubber\&quot;}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count [150 100 125 225 250 375 300]))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300])))))&quot; &quot;(macroexpand '(draw-fill-reset {}\n                          (if true\n                            (.drawPolygon default-g2d (int-array [150 250 325 375 450 275 100]) (int-array [150 100 125 225 250 375 300]) (count [150 100 125 225 250 375 300]))\n                            (.fillPolygon default-g2d 1 2 (count [150 100 125 225 250 375 300])))))&quot; &quot;(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true)&quot; &quot;(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true {:color :red})&quot; &quot;(macroexpand-1 '(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true {:color (create-color :red)}))&quot; &quot;(macroexpand '(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true {:color (create-color :red)}))&quot; &quot;(polygon [150 250 325 375 450 275 100] [150 100 125 225 250 375 300] true {:color (create-color :red)})&quot; &quot;(polygon [150 250 325 375 450 275 100] [250 200 225 325 350 475 400] true)&quot; &quot;(def a create-image-from-file \&quot;res/bg-1.JPG\&quot;)&quot; &quot;(def a (create-image-from-file \&quot;res/bg-1.JPG\&quot;))&quot; &quot;a&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (image 0 0 a))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (image 0 0 a {:composite :src}))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (image 0 0 a {:composite :dst_out}))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (rectangle 100 100 400 400 true)\n  (image 0 0 a {:composite :dst_over}))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (rectangle 100 100 400 400 true)\n  (image 0 0 a {:composite :clear}))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (rectangle 100 100 400 400 true)\n  (image 0 0 a {:composite :src_out}))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (rectangle 100 100 400 400 true)\n  (image 0 0 a {:composite :src_in}))&quot; &quot;(let[ a (create-image-from-file \&quot;res/bg-1.JPG\&quot;)]\n  (rectangle 100 100 400 400 true)\n  (image 0 0 a))&quot; &quot;(use 'graphics2d-enclojed.core)&quot; &quot;(create-color 0.5 0.5 0.5 1)&quot; &quot;(create-color 175 175 175 255)&quot; &quot;(create-color :cyan)&quot; &quot;(def a (Rectangle2D. 20 20 20 20))&quot; &quot;(shape a)&quot; &quot;(shape a {})&quot; &quot;(def a (Rectangle2D$Double. 20 20 20 20))&quot; &quot;(shape a true {})&quot; &quot;(oval 100 100 100 100 true )&quot; &quot;(use 'graphics2d-enclojed.core :reload)#&quot; &quot;(use 'graphics2d-enclojed.core :reload)&quot; &quot;(oval 100 100 100 100 true {:color (create-color :blue)})&quot; &quot;(oval 300 300 300 300 true {:color (create-color :blue)})&quot; &quot;(oval 600 500 300 300 true {:color (create-color :red)})&quot; &quot;(oval 600 500 300 300 true)&quot; &quot;(repaint)&quot; &quot;(use 'image-compose.core)&quot; &quot;(render-output)&quot; &quot;(save-image text.png png)&quot; &quot;(File. \&quot;test.png\&quot;)&quot; &quot;(save-image \&quot;text.png\&quot; \&quot;png\&quot;)&quot; &quot;(trim \&quot;res/test.png\&quot;)&quot; &quot;(last (split \&quot;res/test.png\&quot;))&quot; &quot;(last (split \&quot;res/test.png\&quot; \&quot;.\&quot;))&quot; &quot;(last (split \&quot;res/test.png\&quot; .))&quot; &quot;(split \&quot;res/test.png\&quot; \&quot;.\&quot;)&quot; &quot;(String/split \&quot;res/test.png\&quot; \&quot;.\&quot;)&quot; &quot;()&quot; &quot;(clojure.string/split\&quot;res/test.png\&quot; \&quot;.\&quot;)&quot; &quot;(clojure.string/split\&quot;res/test.png\&quot; #\&quot;.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;/\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;test\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;'.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;~.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;/.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;\\.\&quot;)&quot; &quot;(last(clojure.string/split \&quot;res/test.png\&quot; #\&quot;\\.\&quot;))&quot; &quot;(save-image \&quot;res/test2.png\&quot;)&quot; &quot;(use 'image-compose.core :reload)&quot; &quot;(to-json)&quot;], :remote []}}</component>
</project>