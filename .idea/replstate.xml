<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1460023747758">{:repl-history {:ide [], :local [&quot;(String/split \&quot;res/test.png\&quot; \&quot;.\&quot;)&quot; &quot;(clojure.string/split\&quot;res/test.png\&quot; \&quot;.\&quot;)&quot; &quot;(clojure.string/split\&quot;res/test.png\&quot; #\&quot;.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;/\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;test\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;'.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;~.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;/.\&quot;)&quot; &quot;(clojure.string/split \&quot;res/test.png\&quot; #\&quot;\\.\&quot;)&quot; &quot;(last(clojure.string/split \&quot;res/test.png\&quot; #\&quot;\\.\&quot;))&quot; &quot;(save-image \&quot;res/test2.png\&quot;)&quot; &quot;(to-json)&quot; &quot;(map #(println \&quot;sdsd\&quot;) \&quot;a\&quot;)&quot; &quot;(map #(println \&quot;sdsd\&quot;) {})&quot; &quot;(map #(println \&quot;sdsd\&quot;) {1})&quot; &quot;(map #(println \&quot;sdsd\&quot;) [1])&quot; &quot;(map #(println (str %1 \&quot;sdsd\&quot;)) [1])&quot; &quot;(map #(println (str %1 \&quot;sdsd\&quot;)) 1)&quot; &quot;(def shapes [(Rectangle2D$Double 0 0 200 200)\n             (Line2D$Double 200 200 500 500)\n             ])&quot; &quot;(shapes [] true)&quot; &quot;(shapes 1 true)&quot; &quot;(shapes \n  true)&quot; &quot;(def shapes [(Rectangle2D$Double. 0 0 200 200)\n             (Line2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes true {:color (create-color :blue)})&quot; &quot;()&quot; &quot;(macroexpand-1 '(shapes shapes true))&quot; &quot;(macroexpand '(shapes shapes true))&quot; &quot;(shapes shapes true)&quot; &quot;shapes1&quot; &quot;render-output&quot; &quot;(a)&quot; &quot;(def shapes1 [(Rectangle2D$Double. 0 0 200 200)\n             (Line2D$Double. 200 200 500 500)])&quot; &quot;(map #(.fill default-g2d %1) shapes1)&quot; &quot;(shapes shapes1 false)&quot; &quot;(oval 10 10 100 100)&quot; &quot;(oval 10 10 100 100 true {})&quot; &quot;(def a {})&quot; &quot;(oval 10 10 100 100 true )&quot; &quot;(macroexpand '(draw-fill-reset a\n                               (println \&quot;jdsjf\&quot;)))&quot; &quot;(macroexpand '(draw-fill-reset (eval a)\n                               (println \&quot;jdsjf\&quot;)))&quot; &quot;(macroexpand '(draw-fill-reset {}\n                               (println \&quot;jdsjf\&quot;)))&quot; &quot;{}&quot; &quot;a&quot; &quot;(resolve a)&quot; &quot;(not-empty {})&quot; &quot;(not-empty {:a 1})&quot; &quot;(not-empty a)&quot; &quot;(not-empty 'a)&quot; &quot;(macroexpand (draw-fill-reset a\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(macroexpand (draw-fill-reset 'a\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(macroexpand (draw-fill-reset (eval 'a)\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(macroexpand (draw-fill-reset (eval a)\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(eval 'a)&quot; &quot;(eval a)&quot; &quot;(eval '~a)&quot; &quot;(eval ~'a)&quot; &quot;(eval ~a)&quot; &quot;(eval `a)&quot; &quot;(eval @a)&quot; &quot;(eval ~@a)&quot; &quot;(macroexpand '(draw-fill-reset (eval 'a)\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(draw-fill-reset (eval 'a)\n                              (println \&quot;sdasd\&quot;))&quot; &quot;(def a {:a 1})&quot; &quot;(draw-fill-reset 'a (println \&quot;sdasd\&quot;))&quot; &quot;(draw-fill-reset {} (println \&quot;sdasd\&quot;))&quot; &quot;(draw-fill-reset a (println \&quot;sdasd\&quot;))&quot; &quot;(draw-fill-reset (eval a) (println \&quot;sdasd\&quot;))&quot; &quot;(macroexpand '(draw-fill-reset (eval a) (println \&quot;sdasd\&quot;)))&quot; &quot;(use 'image-compose.core )&quot; &quot;(repaint)&quot; &quot;(def shapes1 [(Rectangle2D$Double. 0 0 200 200)\n             (Rectangle2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes1 true)&quot; &quot;(def a {:color (create-color :blue)})&quot; &quot;(macroexpand '(draw-fill-reset a (println \&quot;mach sachen\&quot;)))&quot; &quot;(draw-fill-reset a (println \&quot;mach sachen\&quot;))&quot; &quot;\n(def shapes1 [(Rectangle2D$Double. 0 0 200 200)\n             (Rectangle2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes1 true {})&quot; &quot;(shapes shapes1 true {:color (create-color :black)})&quot; &quot;(shapes shapes1 true {:color (create-color :black)}\n        )&quot; &quot;(set-color (create-color :black))&quot; &quot;(shapes shapes1 true )&quot; &quot;(shapes shapes1 true {:color (create-color :blue)})&quot; &quot;(shapes shapes1 false )&quot; &quot;(render-output\n  )&quot; &quot;(def shapes1 [(Rectangle2D$Double. 0 0 200 200) (Rectangle2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes1 false {:color (create-color :blue)})&quot; &quot;(use 'image-compose.core)&quot; &quot;(oval 100 100 100 100 true (:color (create-color :red)))&quot; &quot;(def fill true)\n(def settings {:color (create-color :red)})\n\n(macroexpand '(draw-fill-reset settings\n                               (if true\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100))))&quot; &quot;(macroexpand '(draw-fill-reset settings\n                               (if fill\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100))))&quot; &quot;(draw-fill-reset settings\n                               (if fill\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100)))&quot; &quot;(draw-fill-reset {}\n                               (if fill\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100)))&quot; &quot;(oval 100 100 100 100 true {:color (create-color :red)})&quot; &quot;(use 'image-compose.core :reload)&quot; &quot;(draw-shapes)&quot; &quot;(render-output)&quot; &quot;(use 'image-compose.unittest :reload :all)&quot; &quot;(use 'image-compose.unittest :all)&quot; &quot;(use 'image-compose.unittest :reload)&quot; &quot;(use 'image-compose.unittest)&quot;], :remote []}}</component>
</project>