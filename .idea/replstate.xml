<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459431586021">{:repl-history {:ide [], :local [&quot;(create-styled-text :kerning true)&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true :strike-through false})&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true :strike-through true})&quot; &quot;(type true)&quot; &quot;(type #())&quot; &quot;(macroexpand '(when-&gt; {} 10 (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) true (assoc :b 2) (assoc :c 3)))&quot; &quot;(when-&gt; {} true (:a 1))&quot; &quot;(macroexpand '(when-&gt; {} true (:a 1)))&quot; &quot;(when-&gt; {} true (assoc(:a 1)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc(:a 1))))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :a 1 )))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 )))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(-&gt; {}\n    (assoc \&quot;sdd\&quot;))&quot; &quot;(use 'graphics2d-enclojed.core :reload )&quot; &quot;(create-styled-text \&quot;Hallo wie gehts\&quot; {:kerning :on})&quot; &quot;(use 'graphics2d-enclojed.core)&quot; &quot;(load-image :source \&quot;res/test.png\&quot;)&quot; &quot;(ImageIO/read (File.\&quot;res/test.png\&quot;))&quot; &quot;(load-image {:source \&quot;res/tessdsdt.png\&quot;})&quot; &quot;(load-image {source \&quot;res/test.png\&quot;})&quot; &quot;(load-image {:source \&quot;res/test.png\&quot;})&quot; &quot;(image (load-image {:source \&quot;res/test.png\&quot;})0 0)&quot; &quot;(image (load-image {:source \&quot;res/test.png\&quot;})0 0 0)&quot; &quot;(image  0 0 0)&quot; &quot;(image (load-image {:source \&quot;res/test.png\&quot;})0 0 )&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 0.5) 100 100)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 0.5) 0 0)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;)  0 0)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 1) 0 0)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1.0 1.0 1.0 0.5) 0 0)&quot; &quot;(bean (create-scaleOp 1 1 1 0.5))&quot; &quot;(create-scaleOp 1 1 1 0.5)&quot; &quot;(:class (bean (create-scaleOp 1 1 1 0.5)))&quot; &quot;(.getScaleFactors (:class (bean (create-scaleOp 1 1 1 0.5))))&quot; &quot;(.getScaleFactors (create-scaleOp 1 1 1 0.5))&quot; &quot;(.getScaleFactors (create-scaleOp 1 1 1 0.5) nil)&quot; &quot;(.getScaleFactors (create-scaleOp 1 1 0.5 0.5) nil)&quot; &quot;(.getScaleOffsets (create-scaleOp 1 1 0.5 0.5) nil)&quot; &quot;(.getOffsets (create-scaleOp 1 1 0.5 0.5) nil)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 1) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) 0 0 0 0 0 0 0 0 nil)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) 0 0 200 200 0 0 200 200 nil)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array (1 1 1 0.5) (float-array 4))) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5] (float-array 4))) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5] (float-array [4]))) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array '(1 1 1 0.5)) (float-array 4)) 0 0)&quot; &quot;(float-array 4)&quot; &quot;(float-array '(1 1 1 0.5))&quot; &quot;(def a (float-array '(1 1 1 0.5)))&quot; &quot;a&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array '(1 1 1 0.5)) (float-array 4) nil) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array (list(1 1 1 0.5))) (float-array 4) nil) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5]) (float-array 4) nil) 0 0)&quot; &quot;(pprint (float-array '(1 1 1 0.5)))&quot; &quot;(pprint (float-array 4))&quot; &quot;(pprint (float-array 4 nil))&quot; &quot;(pprint (float-array '(nil nil nil nil)))&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5]) (float-array [1 1 1 1]) nil) 0 0)&quot; &quot;(use 'graphics2d-enclojed.core :reload)#&quot; &quot;(rectangle 25 25 100 100 {:join :bevel :color ()})&quot; &quot;(use 'graphics2d-enclojed.core )&quot; &quot;(rectangle 25 25 100 100 {:join :bevel :color (create-color :blue)})&quot; &quot;(rectangle 25 25 100 100 false {:join :bevel :color (create-color :blue)})&quot; &quot;(rectangle 100 100 100 100 false {:join :round :cap :square :color (create-color :blue)})&quot; &quot;(rectangle 200 200 100 100 false {:join :round :cap :square :width 5.0 :color (create-color :blue)})&quot; &quot;(rectangle 400 400 200 200 false {:join :bevel :cap :square :width 10.0 :color (create-color :blue)})&quot; &quot;(rectangle 800 400 200 200 false {:join :square :cap :square :width 10.0 :color (create-color :blue)})&quot; &quot;(rectangle 400 400 200 200 false {:join :bevel :cap :round :width 10.0 :color (create-color :blue)})&quot; &quot;(rectangle 800 400 200 200 false {:join :bevel :cap :round :width 10.0 :color (create-color :blue)})&quot; &quot;(rectangle 200 200 200 200 false {:dash [2.0] :join :bevel :cap :round :width 5.0 :color (create-color :blue)})&quot; &quot;(rectangle 200 200 200 200 false {:dash (float-array '(2.0)) :join :bevel :cap :round :width 5.0 :color (create-color :blue)})&quot; &quot;(rectangle 200 200 200 200 false {:dash (float-array '(10.0)) :join :bevel :cap :round :width 5.0 :color (create-color :blue)})&quot; &quot;(rectangle 200 200 200 200 false {:dash (float-array [10.0 10.0]) :join :bevel :cap :round :width 5.0 :color (create-color :blue)})&quot; &quot;(rectangle 200 200 200 200 false {:dash [10.0 10.0] :join :bevel :cap :round :width 5.0 :color (create-color :blue)})&quot; &quot;()&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; :sans-serif {:underline :low-dashed :weight :extra-light}))&quot; &quot;(create-font :times)&quot; &quot;(create-font :sans-serif)&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 10.0 :underline :low-dashed :weight :extra-light}))&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :color (create-color :red)}))&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :foreground (create-color :red)}))&quot; &quot;(styled-text 100 100 a)&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :foreground (create-color :red) :swap-colors-on true}))&quot; &quot;(def a (create-styled-text \&quot;Ich bin Satz A.\&quot; {:name :sans-serif :style :bold :size 60.0 :underline :low-dashed :weight :extra-light :foreground (create-color :red) :swap-colors true}))&quot; &quot;(def image (load-image \&quot;res/bg-1.JPG\&quot;))&quot; &quot;img&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))&quot; &quot;(set-background (create-color :black))&quot; &quot;(image 400 0 img)&quot; &quot;(repaint)&quot; &quot;(render-output)&quot; &quot;(macroexpand '(create-general-path (lineTo 1 2)))&quot; &quot;(use 'graphics2d-enclojed.core :reload)&quot; &quot;(def a (GeneralPath.))&quot; &quot;(doto a\n  (.moveTo 100 200)\n  (.lineTo 200 200)\n  (.lineTo 150 100)\n  (.lineTo 100 200))&quot; &quot;(doto a\n  (.lineTo 200 200)\n  (.lineTo 150 100)\n  (.lineTo 100 200))&quot;], :remote []}}</component>
</project>