<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1460457442677">{:repl-history {:ide [], :local [&quot;(with-transformation (create-transformation (scale 0.5 0.5) (translate 50 50)) (rectangle 100 100 100 100 true {:color (create-color :red)}))&quot; &quot;(repaint)(render-output)&quot; &quot;(use 'image-compose.core)&quot; &quot;(let*\n  [image__1844__auto__ (java.awt.image.BufferedImage. 2048 2048 java.awt.image.BufferedImage/TYPE_INT_ARGB)]\n  (clojure.core/binding\n    [image-compose.core/default-image\n     image__1844__auto__\n     image-compose.core/default-g2d\n     (.createGraphics image__1844__auto__)\n     image-compose.core/default-render-settings\n     {:color-rendering :quality,\n      :aplpha-interpolation :default,\n      :background nil,\n      :fractional-metrics :on,\n      :antialiasing :on,\n      :dithering :disable,\n      :rendering :quality,\n      :interpolatioin :bicubic,\n      :stroke-control :normalize,\n      :text-antialiasing :off}]\n    (image-compose.core/set-rendering-hints\n      {:color-rendering :quality,\n       :aplpha-interpolation :default,\n       :background nil,\n       :fractional-metrics :on,\n       :antialiasing :off,\n       :dithering :disable,\n       :rendering :quality,\n       :interpolatioin :bicubic,\n       :stroke-control :normalize,\n       :text-antialiasing :off})\n    (do (rectangle 100 100 100 100 true))))&quot; &quot;(compose 2048 2048 {:antialiasing :on})&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (.getWidth default-g2d))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (.getWidth default-image))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (.getHeight default-image))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (round-rectangle 100 100 100 100 true))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (round-rectangle 100 100 100 100 5 5 true))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (round-rectangle 100 100 100 100 5 5 true)\n         (render-output))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (round-rectangle 100 100 100 100 true)\n         (render-output))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (round-rectangle 100 100 100 100 10 10 true)\n         (render-output))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (round-rectangle 100 100 100 100 10 10 true))&quot; &quot;(macroexpand '(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true)))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true)\n         (render-output))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true {:color (create-color :black)})\n         (render-output))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true )\n         (render-output))&quot; &quot;(.getHeight (compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true )))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true ))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true {:color (create-color :black)}))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true {:color (create-color :black)})))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n         (rectangle 100 100 100 100 true {:color (create-color :black)})\n                        )\n               )&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  :black)}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (macroexpand '(draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  0.839216 0.839216 0.839216 0.5)})))))&quot; &quot;(compose 2048 2048 {:antialiasing :on}\n                  (macroexpand '(draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  0.839216 0.839216 0.839216 0.5)}))))&quot; &quot;\n                  (macroexpand '(draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  0.839216 0.839216 0.839216 0.5)})))&quot; &quot;\n                 (macroexpand '(draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  0.839216 0.839216 0.839216 0.5)})))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color '(color  0.839216 0.839216 0.839216 0.5)}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  0.839216 0.839216 0.839216 0.5)}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 0.5)}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 )}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 1)}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 255)}))))&quot; &quot;(def pic (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 0)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 0)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 255)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  255 255 255 0.1)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  0.5 0.5 0.5 0.1)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  100 100 100 100)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  100 100 100 255)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 {:color (color  :green)}))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048))))&quot; &quot;(render-output (compose 2048 2048 {:antialiasing :on}\n                  (draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 true))))&quot; &quot;(macroexpand '(draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 true)))&quot; &quot;(macroexpand '(draw {:composite :dst_in}\n                        (rectangle 0 0 500 2048 true)))&quot; &quot;(color :black)&quot; &quot;#&quot; &quot;(color :yellow)&quot; &quot;(draw {:composite :src}\n                        (rectangle 0 0 500 2048 true))&quot; &quot;(render-output (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true))))&quot; &quot;(macroexpand '(draw {:composite :src}\n                        (rectangle 0 0 500 2048 true '(color :blue))))&quot; &quot;(macroexpand '(draw {:composite :src}\n                        (rectangle 0 0 500 2048 true (color :blue))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true (color :blue)))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true '(color :blue)))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true {:color (color :blue)}))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(macroexpand '(compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(macroexpand-1 '(compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(macroexpand-1 '(draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(macroexpand-all '(draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        \n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output default-g2d)&quot; &quot;(use image-compose.core :reload)&quot; &quot;(rectangle 0 0 500 2048 true {:color (color :blue)})&quot; &quot;(set-color (color :blue))&quot; &quot;(rectangle 0 0 500 2048 true)&quot; &quot;(render-output default-image)&quot; &quot;(render-output (compose 2048 2048 {}\n                        (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                        (rectangle 0 0 500 2048 true {:color (color :blue)})\n                        (println (.getColor default-g2d))\n                        (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                        (println (.getColor default-g2d))\n                        (rectangle 0 0 500 2048 true {:color (color :blue)})\n                        (println (.getColor default-g2d))\n                        (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (with-shape-settings {:color (color 100 100 100 100)}\n                                             (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 0 500 2048 true {:color (color :blue)})\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (with-shape-settings {:color (color 100 100 100 100)}\n                                             (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 0 500 2048 true)\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;200&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeigth img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 2048 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 2048 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeigth img) 10 10 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeight img) 10 10 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeight img) 10 10 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeight img) 100 100 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeigth img) 2) 200 (/ (.getHeigth img) 2) 50 50 ))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 ))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 20))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 20 {}))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 20 {}))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(.getRen)&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:text-antialiasing :on}\n                        (.getRenderingHints default-g2d)\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:text-antialiasing :on}\n                        (println (.getRenderingHints default-g2d))\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(getRenderingHints default-g2d)&quot; &quot;(.getRenderingHints default-g2d)&quot; &quot;(:on keys-antialiasing)&quot; &quot;(:off keys-antialiasing)&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:text-antialiasing :on}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(use 'image-compose.core :reload)&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:antialiasing :on}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot;], :remote []}}</component>
</project>