<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1460321459314">{:repl-history {:ide [], :local [&quot;(def a {})&quot; &quot;(oval 10 10 100 100 true )&quot; &quot;(macroexpand '(draw-fill-reset a\n                               (println \&quot;jdsjf\&quot;)))&quot; &quot;(macroexpand '(draw-fill-reset (eval a)\n                               (println \&quot;jdsjf\&quot;)))&quot; &quot;(macroexpand '(draw-fill-reset {}\n                               (println \&quot;jdsjf\&quot;)))&quot; &quot;{}&quot; &quot;(resolve a)&quot; &quot;(not-empty {})&quot; &quot;(not-empty {:a 1})&quot; &quot;(not-empty a)&quot; &quot;(not-empty 'a)&quot; &quot;(macroexpand (draw-fill-reset a\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(macroexpand (draw-fill-reset 'a\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(macroexpand (draw-fill-reset (eval 'a)\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(macroexpand (draw-fill-reset (eval a)\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(eval 'a)&quot; &quot;(eval a)&quot; &quot;(eval '~a)&quot; &quot;(eval ~'a)&quot; &quot;(eval ~a)&quot; &quot;(eval `a)&quot; &quot;(eval @a)&quot; &quot;(eval ~@a)&quot; &quot;(macroexpand '(draw-fill-reset (eval 'a)\n                              (println \&quot;sdasd\&quot;)))&quot; &quot;(draw-fill-reset (eval 'a)\n                              (println \&quot;sdasd\&quot;))&quot; &quot;(def a {:a 1})&quot; &quot;(draw-fill-reset 'a (println \&quot;sdasd\&quot;))&quot; &quot;(draw-fill-reset {} (println \&quot;sdasd\&quot;))&quot; &quot;(draw-fill-reset a (println \&quot;sdasd\&quot;))&quot; &quot;(draw-fill-reset (eval a) (println \&quot;sdasd\&quot;))&quot; &quot;(macroexpand '(draw-fill-reset (eval a) (println \&quot;sdasd\&quot;)))&quot; &quot;(use 'image-compose.core )&quot; &quot;(def shapes1 [(Rectangle2D$Double. 0 0 200 200)\n             (Rectangle2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes1 true)&quot; &quot;(def a {:color (create-color :blue)})&quot; &quot;(macroexpand '(draw-fill-reset a (println \&quot;mach sachen\&quot;)))&quot; &quot;(draw-fill-reset a (println \&quot;mach sachen\&quot;))&quot; &quot;\n(def shapes1 [(Rectangle2D$Double. 0 0 200 200)\n             (Rectangle2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes1 true {})&quot; &quot;(shapes shapes1 true {:color (create-color :black)})&quot; &quot;(shapes shapes1 true {:color (create-color :black)}\n        )&quot; &quot;(set-color (create-color :black))&quot; &quot;(shapes shapes1 true )&quot; &quot;(shapes shapes1 true {:color (create-color :blue)})&quot; &quot;(shapes shapes1 false )&quot; &quot;(render-output\n  )&quot; &quot;(def shapes1 [(Rectangle2D$Double. 0 0 200 200) (Rectangle2D$Double. 200 200 500 500)])&quot; &quot;(shapes shapes1 false {:color (create-color :blue)})&quot; &quot;(oval 100 100 100 100 true (:color (create-color :red)))&quot; &quot;(def fill true)\n(def settings {:color (create-color :red)})\n\n(macroexpand '(draw-fill-reset settings\n                               (if true\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100))))&quot; &quot;(macroexpand '(draw-fill-reset settings\n                               (if fill\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100))))&quot; &quot;(draw-fill-reset settings\n                               (if fill\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100)))&quot; &quot;(draw-fill-reset {}\n                               (if fill\n                                 (.fillOval default-g2d 100 100 100 100)\n                                 (.drawOval default-g2d 100 100 100 100)))&quot; &quot;(oval 100 100 100 100 true {:color (create-color :red)})&quot; &quot;(draw-shapes)&quot; &quot;(use 'image-compose.unittest :reload :all)&quot; &quot;(use 'image-compose.unittest :all)&quot; &quot;(use 'image-compose.unittest)&quot; &quot;(use 'image-compose.unittest )&quot; &quot;(use 'image-compose.unittest :reload)&quot; &quot;(test-shapes-func)&quot; &quot;(use 'image-compose.core)&quot; &quot;(macroexpand '(create-transformation \n  (translate 10 10)))&quot; &quot;(create-transformation \n  (translate 10 10))&quot; &quot;(def a create-transformation (translate 100 100))&quot; &quot;(macroexpand '(create-transformation (translate 100 100)))&quot; &quot;(AffineTransform.)&quot; &quot;(def a (create-transformation \n         (translate 100 100)\n         (rotate 0.5)\n         (scale 0.5 0.5)))&quot; &quot;(macroexpand '(create-transformation \n         (translate 100 100)\n         (rotate 0.5)\n         (scale 0.5 0.5)))&quot; &quot;(def a (create-transformation \n         (translate 100 100)\n         (rotate 0.5)))&quot; &quot;(def a (create-transformation (translate 100 100)(rotate 0.5)(scale 0.5 0.5)))&quot; &quot;(macroexpand '(create-transformation (translate 100 100)(rotate 0.5)(scale 0.5 0.5)))&quot; &quot;(with-transformation a\n                     (rectangle 50 50 100 100 true {:color (create-color :blue)}))&quot; &quot;(with-transformation nil\n                     (rectangle 50 50 100 100 true {:color (create-color :blue)}))&quot; &quot;(with-transformation b\n                     (rectangle 50 50 100 100 true {:color (create-color :blue)}))&quot; &quot;byte-array&quot; &quot;(def b (create-transformation))&quot; &quot;(with-transformation b                     (rectangle 50 50 100 100 true {:color (create-color :blue)}))&quot; &quot;()&quot; &quot;(rectangle 50 50 100 100 true {:color (create-color :red)})&quot; &quot;(repaint)&quot; &quot;(concat-transforms (create-transformation (rotate 0.5)) (.getTransform default-g2d))&quot; &quot;(create-transformation (rotate 0.5))&quot; &quot;(macroexpand '(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)})))&quot; &quot;a&quot; &quot;b&quot; &quot;(def  b (create-transformation ))&quot; &quot;(def a (create-transformation (translate 100 100)))&quot; &quot;(with-transformation b (rectangle 50 50 100 100 true {:color (create-color :blue)}))&quot; &quot;(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)}))&quot; &quot;(def  b (create-transformation ))\n(def a (create-transformation (translate 100 100)))&quot; &quot;(.getTransform default-g2d)&quot; &quot;(def  b (create-transformation ))\n(def a (create-transformation (translate 100 100)))\n  (.getTransform default-g2d)&quot; &quot;(def b (create-transformation))\n(def a (create-transformation (translate 100 100)))\n(.getTransform default-g2d)\n(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)\n(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)&quot; &quot;(def b (create-transformation))\n(def a (create-transformation (translate 100 100)))\n(.getTransform default-g2d)\n(with-transformation b (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)\n(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)&quot; &quot;(def b (create-transformation))\n(def a (create-transformation (translate 100 100)))\n(.getTransform default-g2d)\n(with-transformation b (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)\n(macroexpand '(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)})))\n(.getTransform default-g2d)&quot; &quot;(def b (create-transformation))\n(def a (create-transformation (rotate 5)))\n(.getTransform default-g2d)\n(with-transformation b (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)\n(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)}))\n(.getTransform default-g2d)&quot; &quot;(def b (create-transformation (translate 100 100)))\n(def a (create-transformation (rotate 5)))\n(with-transformation b (rectangle 50 50 100 100 true {:color (create-color :blue)})\n                     (with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)})))\n&quot; &quot;(use 'image-compose.core :reload)&quot; &quot;(def b (create-transformation (translate 100 100)))\n(def a (create-transformation (rotate 5)))\n(with-transformation a (rectangle 50 50 100 100 true {:color (create-color :blue)})\n                     (with-transformation b (rectangle 50 50 100 100 true {:color (create-color :blue)})))\n&quot; &quot;(render-output)&quot;], :remote []}}</component>
</project>