<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1458951595949">{:repl-history {:ide [], :local [&quot;(recatangle 20 20 400 400 true {:color (create-color :red :width 1)})&quot; &quot;(:caps stroke-caps)&quot; &quot;stroke-caps&quot; &quot;(:miter stroke-joins)&quot; &quot;(:sqaure stroke-caps)&quot; &quot;(:square stroke-caps)&quot; &quot;(recatangle 20 20 400 400 true {:color (create-color :red) :width 1})&quot; &quot;(recatangle 50 101 400 400 true {:color (create-color :blue) :width 1})&quot; &quot;(recatangle 100 101 400 400 true {:color (create-color :yellow) :alpha 0.5 :width 1})&quot; &quot;ren&quot; &quot;(recatangle 100 101 400 400 true {:color (create-color :yellow) :alpha 1 :width 1})&quot; &quot;(recatangle 100 101 200 200 true {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(recatangle 100 101 100 100 true {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(recatangle 200 201 100 100 true {:color (create-color :blue) :alpha 0.5 :width 1})&quot; &quot;(recatangle 300 301 100 100 true {:color (create-color :blue):composite :dst_in :alpha 1 :width 1})&quot; &quot;(recatangle 300 301 100 100 true {:color (create-color :blue):composite :clear :alpha 1 :width 1})&quot; &quot;(rectangle 300 301 100 100 true {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(rectangle 300 301 100 100 :fill {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(set-background (create-color :black))&quot; &quot;(def a (set-render-settings default-render-settings))&quot; &quot;a&quot; &quot;(eval a)&quot; &quot;'((RenderingHints/KEY_ANTIALIASING) (RenderingHints/VALUE_ANTIALIAS_ON))&quot; &quot;(eval '((RenderingHints/KEY_ANTIALIASING) (RenderingHints/VALUE_ANTIALIAS_ON)))&quot; &quot;'(RenderingHints/KEY_ANTIALIASING RenderingHints/VALUE_ANTIALIAS_ON)&quot; &quot;(eval '(RenderingHints/KEY_ANTIALIASING RenderingHints/VALUE_ANTIALIAS_ON))&quot; &quot;(set-render-settings default-render-settings)&quot; &quot;(set-rendering-hints default-render-settings)&quot; &quot;(line 50 50 150 150)&quot; &quot;(line 150 150 350 350 {:color (create-color :blue)})&quot; &quot;(set-rendering-hints {:antialiasing :on})&quot; &quot;(set-rendering-hints {:antialiasing :off})&quot; &quot;(line 350 450 650 350)&quot; &quot;(render-output\n  )&quot; &quot;(set-shape-settings)&quot; &quot;(set-shape-settings {:join :join-round})&quot; &quot;(set-shape-settings {:join :round})&quot; &quot;(line 50 50 500 500 {:color (create-color :red)})&quot; &quot;(line 60 60 500 500 )&quot; &quot;(repaint)&quot; &quot;(rectangle 50 50 200 200 :fill {:color (create-color :red)})&quot; &quot;(rectangle 300 300 200 200 :fill)&quot; &quot;(render-output)&quot; &quot;(create-styled-text \&quot;bla\&quot; :kerning true)&quot; &quot;@(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;*(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;'(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;~(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;(macroexpand when-&gt; {} (true) (println \&quot;bla\&quot;))&quot; &quot;(macroexpand -&gt; {} (true) (println \&quot;bla\&quot;))&quot; &quot;(macroexpand -&gt; {}  (println \&quot;bla\&quot;))&quot; &quot;(macroexpand -&gt;)&quot; &quot;(macroexpand (-&gt; {}  (println \&quot;bla\&quot;)))&quot; &quot;(macroexpand (when-&gt; {} (false) (println \&quot;bla\&quot;)))&quot; &quot;(macroexpand (when-&gt; {} (true) (println \&quot;bla\&quot;)))&quot; &quot;(true)&quot; &quot;(macroexpand (when-&gt; {} true (println \&quot;bla\&quot;)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) false (assoc :B 2)))&quot; &quot;(macroexpand '(-&gt; {}  (assoc :A 1) (assoc :B 2)))&quot; &quot;(macroexpand (-&gt; {} true (assoc :A 1) false (assoc :B 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) (assoc :b 2)))&quot; &quot;(macroexpand '(-&gt; {} true (assoc :A 1) false (assoc :B 2)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) (assoc :b 2)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) false (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) true (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) ))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) ))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) false (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) false (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) false (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) false (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(create-styled-text :kerning true)&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true :strike-through false})&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true :strike-through true})&quot; &quot;(type true)&quot; &quot;(type #())&quot; &quot;()&quot; &quot;(macroexpand '(when-&gt; {} 10 (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) true (assoc :b 2) (assoc :c 3)))&quot; &quot;(use 'graphics2d-enclojed.core :reload)&quot; &quot;(when-&gt; {} true (:a 1))&quot; &quot;(macroexpand '(when-&gt; {} true (:a 1)))&quot; &quot;(when-&gt; {} true (assoc(:a 1)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc(:a 1))))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :a 1 )))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 )))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(use 'graphics2d-enclojed.core)&quot; &quot;(-&gt; {}\n    (assoc \&quot;sdd\&quot;))&quot; &quot;(use 'graphics2d-enclojed.core :reload )&quot; &quot;(create-styled-text \&quot;Hallo wie gehts\&quot; {:kerning :on})&quot;], :remote []}}</component>
</project>