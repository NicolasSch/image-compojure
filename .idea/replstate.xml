<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1458838298636">{:repl-history {:ide [], :local [&quot;(.setStroke default-g2d 1.0)&quot; &quot;(.setStroke default-g2d (. java.awt.BasicStroke 1.0))&quot; &quot;(.setStroke default-g2d (. java.awt.BasicStroke 1))&quot; &quot;(.setStroke default-g2d (. java.awt.BasicStroke 0))&quot; &quot;(. BasicStroke 1)&quot; &quot;(. BasicStroke)&quot; &quot;(BasicStroke. 1)&quot; &quot;(.setStroke default-g2d (java.awt.BasicStroke. 0))&quot; &quot;(.draw default-g2d (Rectangle2D$Double. 10 10 10 10))&quot; &quot;(.drawImage default-g2d (default-image nil 0 0))&quot; &quot;(.drawImage default-g2d default-image nil 0 0)&quot; &quot;(recatangle 10 10 1000 100000 default-shape-settings)&quot; &quot;\n(use 'graphics2d-enclojed.app)&quot; &quot;\n(use 'graphics2d-enclojed.app :reload)&quot; &quot;\n\n(use 'graphics2d-enclojed.app :reload)&quot; &quot;\n\n\n(use 'graphics2d-enclojed.app :reload)&quot; &quot;(test)&quot; &quot;(use 'graphics2d-enclojed.app.clj)&quot; &quot;(use 'graphics2d-enclojed.app)&quot; &quot;(use 'graphics2d-enclojed.app :reload)&quot; &quot;(:a a)&quot; &quot;(deref g2d)&quot; &quot;@(render-output {:as :show})&quot; &quot;(def a )&quot; &quot;(def a render-output {:as :show})&quot; &quot;(def a (render-output {:as :show}))&quot; &quot;image&quot; &quot;(deref image)&quot; &quot;default-image&quot; &quot;g2d&quot; &quot;(draw-recatangle 2 2 10 10 {:fill true})&quot; &quot;(use ' graphics2d-enclojed.core)&quot; &quot;(create-image 800 600 {:bla :blub})&quot; &quot;(if ({:test :test}))&quot; &quot;(if ({:test :test})\n  true\n  false)&quot; &quot;(if (nil? {:test :test})\n  true\n  false)&quot; &quot;(macroexpand '(create-image 800 600 {:test :test}))&quot; &quot;(create-image 800 600 {:dash :amarsch})&quot; &quot;(create-image 800 600 )&quot; &quot;(macroexpand '(create-image 800 600 ))&quot; &quot;(macroexpand '(create-image 800 600 {}))&quot; &quot;(macroexpand '(create-image 800 600 5 4 52 {}))&quot; &quot;(create-image 800 600 {})&quot; &quot;(draw-recatangle 1 1 2 2 )&quot; &quot;(draw-recatangle 1 1 2 2 {})&quot; &quot;(show-image {:as :show})&quot; &quot;(draw-recatangle 2.0 2.0 5.0 5.0 {})&quot; &quot;(render-output {:as :show})&quot; &quot;(set-shape-settings {:dash true})&quot; &quot;(set-shape-settings {:join true})&quot; &quot;(set-shape-settings)&quot; &quot;(set-shape-settings {})&quot; &quot;(set-shape-settings {:width 100})&quot; &quot;(expandmacro '(create-image 800 600))&quot; &quot;(macroexpand '(create-image 800 600))&quot; &quot;(create-image 800 600)&quot; &quot;(set-stroke :bevel :butt 1)&quot; &quot;(recatangle)&quot; &quot;(recatangle 5 5 10 10 true default-shape-settings)&quot; &quot;(show-image)&quot; &quot;(use 'graphics2d-enclojed.core)&quot; &quot;()&quot; &quot;#&quot; &quot;(recatangle 10 10 10 10 default-shape-settings)&quot; &quot;(render-output )&quot; &quot;(recatangle 10 10 10 10 true default-shape-settings)&quot; &quot;(recatangle 10 10 1000  12011 true {:color })&quot; &quot;(set-stroke)&quot; &quot;(recatangle 20 20 400 400 true)&quot; &quot;(set-color (create-color :blue))&quot; &quot;(recatangle 20 20 400 400 true {:color (create-color :red)})&quot; &quot;(recatangle 20 20 400 400 true {:color (create-color :red :width 1)})&quot; &quot;(:caps stroke-caps)&quot; &quot;stroke-caps&quot; &quot;(:miter stroke-joins)&quot; &quot;(:sqaure stroke-caps)&quot; &quot;(:square stroke-caps)&quot; &quot;(recatangle 20 20 400 400 true {:color (create-color :red) :width 1})&quot; &quot;(recatangle 50 101 400 400 true {:color (create-color :blue) :width 1})&quot; &quot;(recatangle 100 101 400 400 true {:color (create-color :yellow) :alpha 0.5 :width 1})&quot; &quot;ren&quot; &quot;(recatangle 100 101 400 400 true {:color (create-color :yellow) :alpha 1 :width 1})&quot; &quot;(recatangle 100 101 200 200 true {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(recatangle 100 101 100 100 true {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(recatangle 200 201 100 100 true {:color (create-color :blue) :alpha 0.5 :width 1})&quot; &quot;(recatangle 300 301 100 100 true {:color (create-color :blue):composite :dst_in :alpha 1 :width 1})&quot; &quot;(recatangle 300 301 100 100 true {:color (create-color :blue):composite :clear :alpha 1 :width 1})&quot; &quot;(rectangle 300 301 100 100 true {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(rectangle 300 301 100 100 :fill {:color (create-color :blue) :alpha 1 :width 1})&quot; &quot;(set-background (create-color :black))&quot; &quot;(render-output)&quot; &quot;(def a (set-render-settings default-render-settings))&quot; &quot;a&quot; &quot;(eval a)&quot; &quot;'((RenderingHints/KEY_ANTIALIASING) (RenderingHints/VALUE_ANTIALIAS_ON))&quot; &quot;(eval '((RenderingHints/KEY_ANTIALIASING) (RenderingHints/VALUE_ANTIALIAS_ON)))&quot; &quot;'(RenderingHints/KEY_ANTIALIASING RenderingHints/VALUE_ANTIALIAS_ON)&quot; &quot;(eval '(RenderingHints/KEY_ANTIALIASING RenderingHints/VALUE_ANTIALIAS_ON))&quot; &quot;(use 'graphics2d-enclojed.core :reload)&quot; &quot;(set-render-settings default-render-settings)&quot; &quot;(set-rendering-hints default-render-settings)&quot;], :remote []}}</component>
</project>