<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459370100172">{:repl-history {:ide [], :local [&quot;@(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;*(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;'(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;~(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;(macroexpand when-&gt; {} (true) (println \&quot;bla\&quot;))&quot; &quot;(macroexpand -&gt; {} (true) (println \&quot;bla\&quot;))&quot; &quot;(macroexpand -&gt; {}  (println \&quot;bla\&quot;))&quot; &quot;(macroexpand -&gt;)&quot; &quot;(macroexpand (-&gt; {}  (println \&quot;bla\&quot;)))&quot; &quot;(macroexpand (when-&gt; {} (false) (println \&quot;bla\&quot;)))&quot; &quot;(macroexpand (when-&gt; {} (true) (println \&quot;bla\&quot;)))&quot; &quot;(true)&quot; &quot;(macroexpand (when-&gt; {} true (println \&quot;bla\&quot;)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) false (assoc :B 2)))&quot; &quot;(macroexpand '(-&gt; {}  (assoc :A 1) (assoc :B 2)))&quot; &quot;(macroexpand (-&gt; {} true (assoc :A 1) false (assoc :B 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) (assoc :b 2)))&quot; &quot;(macroexpand '(-&gt; {} true (assoc :A 1) false (assoc :B 2)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) (assoc :b 2)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) false (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) true (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) ))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) ))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :A 1) false (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :A 1) false (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) false (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) false (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} false (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(create-styled-text :kerning true)&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true})&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true :strike-through false})&quot; &quot;(create-styled-text \&quot;bla\&quot; {:kerning true :strike-through true})&quot; &quot;(type true)&quot; &quot;(type #())&quot; &quot;(macroexpand '(when-&gt; {} 10 (assoc :A 1) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(macroexpand '(when-&gt; {} false (assoc :A 1) true (assoc :b 2) (assoc :c 3)))&quot; &quot;(when-&gt; {} true (:a 1))&quot; &quot;(macroexpand '(when-&gt; {} true (:a 1)))&quot; &quot;(when-&gt; {} true (assoc(:a 1)))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc(:a 1))))&quot; &quot;(macroexpand '(when-&gt; {} true (assoc :a 1 )))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 )))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2) true (assoc :c 3)))&quot; &quot;(macroexpand (when-&gt; {} true (assoc :a 1 ) true (assoc :b 2) false (assoc :c 3)))&quot; &quot;(-&gt; {}\n    (assoc \&quot;sdd\&quot;))&quot; &quot;(use 'graphics2d-enclojed.core :reload )&quot; &quot;(create-styled-text \&quot;Hallo wie gehts\&quot; {:kerning :on})&quot; &quot;()&quot; &quot;(use 'graphics2d-enclojed.core)&quot; &quot;(load-image :source \&quot;res/test.png\&quot;)&quot; &quot;(ImageIO/read (File.\&quot;res/test.png\&quot;))&quot; &quot;(load-image {:source \&quot;res/tessdsdt.png\&quot;})&quot; &quot;(load-image {source \&quot;res/test.png\&quot;})&quot; &quot;(load-image {:source \&quot;res/test.png\&quot;})&quot; &quot;(image (load-image {:source \&quot;res/test.png\&quot;})0 0)&quot; &quot;(image (load-image {:source \&quot;res/test.png\&quot;})0 0 0)&quot; &quot;(image  0 0 0)&quot; &quot;(image (load-image {:source \&quot;res/test.png\&quot;})0 0 )&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 0.5) 100 100)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 0.5) 0 0)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;)  0 0)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 1) 0 0)&quot; &quot;(image (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1.0 1.0 1.0 0.5) 0 0)&quot; &quot;(bean (create-scaleOp 1 1 1 0.5))&quot; &quot;(create-scaleOp 1 1 1 0.5)&quot; &quot;(:class (bean (create-scaleOp 1 1 1 0.5)))&quot; &quot;(.getScaleFactors (:class (bean (create-scaleOp 1 1 1 0.5))))&quot; &quot;(.getScaleFactors (create-scaleOp 1 1 1 0.5))&quot; &quot;(.getScaleFactors (create-scaleOp 1 1 1 0.5) nil)&quot; &quot;(.getScaleFactors (create-scaleOp 1 1 0.5 0.5) nil)&quot; &quot;(.getScaleOffsets (create-scaleOp 1 1 0.5 0.5) nil)&quot; &quot;(.getOffsets (create-scaleOp 1 1 0.5 0.5) nil)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (create-scaleOp 1 1 1 1) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) 0 0 0 0 0 0 0 0 nil)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) 0 0 200 200 0 0 200 200 nil)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array (1 1 1 0.5) (float-array 4))) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5] (float-array 4))) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5] (float-array [4]))) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array '(1 1 1 0.5)) (float-array 4)) 0 0)&quot; &quot;(float-array 4)&quot; &quot;(float-array '(1 1 1 0.5))&quot; &quot;(def a (float-array '(1 1 1 0.5)))&quot; &quot;a&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array '(1 1 1 0.5)) (float-array 4) nil) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array (list(1 1 1 0.5))) (float-array 4) nil) 0 0)&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5]) (float-array 4) nil) 0 0)&quot; &quot;(pprint (float-array '(1 1 1 0.5)))&quot; &quot;(pprint (float-array 4))&quot; &quot;(pprint (float-array 4 nil))&quot; &quot;(pprint (float-array '(nil nil nil nil)))&quot; &quot;(.drawImage default-g2d (load-image \&quot;res/test.png\&quot;) (RescaleOp. (float-array [1 1 1 0.5]) (float-array [1 1 1 1]) nil) 0 0)&quot; &quot;(render-output)&quot; &quot;(use 'graphics2d-enclojed.core :reload)#&quot; &quot;(use 'graphics2d-enclojed.core :reload)&quot;], :remote []}}</component>
</project>