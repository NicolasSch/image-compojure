<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1461082478030">{:repl-history {:ide [], :local [&quot;(macroexpand '(draw {:composite :src_over}\n                        (rectangle 0 0 500 2048 true)))&quot; &quot;(macroexpand '(draw {:composite :dst_in}\n                        (rectangle 0 0 500 2048 true)))&quot; &quot;(color :black)&quot; &quot;#&quot; &quot;(color :yellow)&quot; &quot;(draw {:composite :src}\n                        (rectangle 0 0 500 2048 true))&quot; &quot;(render-output (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true))))&quot; &quot;(macroexpand '(draw {:composite :src}\n                        (rectangle 0 0 500 2048 true '(color :blue))))&quot; &quot;(macroexpand '(draw {:composite :src}\n                        (rectangle 0 0 500 2048 true (color :blue))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true (color :blue)))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true '(color :blue)))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                        (rectangle 0 0 500 2048 true {:color (color :blue)}))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src}\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(macroexpand '(compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(macroexpand-1 '(compose 2048 2048 {}\n                        (draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true))))&quot; &quot;(macroexpand-1 '(draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(macroexpand-all '(draw {:composite :src_over}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        \n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                              (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                              (rectangle 0 0 500 2048 true {:color (color :blue)})\n                              (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output default-g2d)&quot; &quot;(rectangle 0 0 500 2048 true {:color (color :blue)})&quot; &quot;(set-color (color :blue))&quot; &quot;(rectangle 0 0 500 2048 true)&quot; &quot;(render-output default-image)&quot; &quot;(render-output (compose 2048 2048 {}\n                        (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                        (rectangle 0 0 500 2048 true {:color (color :blue)})\n                        (println (.getColor default-g2d))\n                        (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                        (println (.getColor default-g2d))\n                        (rectangle 0 0 500 2048 true {:color (color :blue)})\n                        (println (.getColor default-g2d))\n                        (rectangle 0 250 500 1750 true)))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (with-shape-settings {:color (color 100 100 100 100)}\n                                             (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 0 500 2048 true {:color (color :blue)})\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(render-output (compose 2048 2048 {}\n                        (with-shape-settings {:color (color 100 100 100 100)}\n                                             (image 0 0 (load-image \&quot;res/bg-1.JPG\&quot;))\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 0 500 2048 true)\n                                             (println (.getColor default-g2d))\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;200&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeigth img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 2048 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 2048 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeigth img) 10 10 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeight img) 10 10 true)\n                                             (rectangle 0 250 500 1750 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeight img) 10 10 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (round-rectangle 0 0 500 (.getHeight img) 100 100 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeigth img) 2) 200 (/ (.getHeigth img) 2) 50 50 ))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 ))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot;))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 20))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 20 {}))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 20 {}))\n(render-output (compose (.getWidth img) (.getHeight img) {}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(.getRen)&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:text-antialiasing :on}\n                        (.getRenderingHints default-g2d)\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:text-antialiasing :on}\n                        (println (.getRenderingHints default-g2d))\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(getRenderingHints default-g2d)&quot; &quot;(.getRenderingHints default-g2d)&quot; &quot;(:on keys-antialiasing)&quot; &quot;(:off keys-antialiasing)&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:text-antialiasing :on}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def img (load-image \&quot;res/bg-1.JPG\&quot;))\n(def txt (create-styled-text \&quot;AnyUp\&quot; :times :bold 50 {:foreground (color :red)}))\n(render-output (compose (.getWidth img) (.getHeight img) {:antialiasing :on}\n                        (with-shape-settings {:color (color 100 100 100 200)}\n                                             (image 0 0 img)\n                                             (styled-text 1000 300 txt)\n                                             (rectangle 0 0 500 (.getHeight img) true)\n                                             (round-rectangle 500 (/ (.getHeight img) 2) 200 (/ (.getHeight img) 2) 50 50 true))))&quot; &quot;(def a (load-img \&quot;res/bg-1.JPG\&quot;))&quot; &quot;(use 'image-compose.core)&quot; &quot;(image 0 0 100 100 500 500 1000 1000 a)&quot; &quot;a&quot; &quot;(def a (load-image \&quot;res/bg-1.JPG\&quot;))&quot; &quot;(image a 0 0 100 100 500 500 1000 1000)&quot; &quot;(render-output (image a 0 0 100 100 500 500 1000 1000))&quot; &quot;(render-output (compose (image a 0 0 100 100 500 500 1000 1000)))&quot; &quot;(render-output (compose 800 600 (image a 0 0 100 100 500 500 1000 1000)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 100 100 500 500 1000 1000)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 500 500 1000 1000)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 1000 1000 1500 1500)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 1000 500 1500 1500)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 1000 500 1500 1000)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 800 500 1300 1000)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 800 300 1300 700)))&quot; &quot;(render-output (compose 800 600 {} (image a 0 0 500 500 800 300 1300 800)))&quot; &quot;(def textx (create-styled-text \&quot;X-Achse --------&gt;\&quot; :sans-serif :bold 20 {:foreground (color :black)}))&quot; &quot;(def texty (create-styled-text \&quot;y-Achse --------&gt;\&quot; :sans-serif :bold 20 {:foreground (color :black)}))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        \n                        ))&quot; &quot;(def tr (transform\n          (rotate 180)))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text  200 100 textx)\n                        (with-transform tr\n                                        (styled-text texty 100 200))\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text  200 100 textx)\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text  (create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20)0 0)\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text  (create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)})0 0)\n                        ))&quot; &quot;(def taxt (create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text  taxt 0 0)\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text  textx 0 0)\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 0 0 (create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 0 0 (create-styled-text \&quot;(100,100)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 100 100(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 100 100(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 20 20(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 50 0(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 50 25(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 50 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 0 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 0 60(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 50(create-styled-text \&quot;(500,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 50(create-styled-text \&quot;(500,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 500(create-styled-text \&quot;(500,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 500(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 50(create-styled-text \&quot;(500,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 510(create-styled-text \&quot;(500,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 510(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 50(create-styled-text \&quot;(500,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 515(create-styled-text \&quot;(500,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 515(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n\n                        ))&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 50(create-styled-text \&quot;(500,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 515(create-styled-text \&quot;(500,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 515(create-styled-text \&quot;(0,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n\n                        ))&quot; &quot;(use image-compose.core :reload)&quot; &quot;(use 'image-compose.core :reload)&quot; &quot;(render-output (compose 800 600 {:text-antialiasing :on} \n                        (image a 0 0 500 500 800 300 1300 700)\n                        (styled-text 10 50(create-styled-text \&quot;(0,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 50(create-styled-text \&quot;(500,0)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 500 515(create-styled-text \&quot;(500,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))\n                        (styled-text 10 515(create-styled-text \&quot;(0,500)\&quot; :sans-serif :bold 20 {:foreground (color :black)}))))&quot;], :remote []}}</component>
</project>